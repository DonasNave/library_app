@page "/login"

@using LibraryApp.Areas.Identity
@using LibraryApp.Identity

@inject LibraryUserProvider LibraryUserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime Js
@inject NavigationManager NavigationManager


<PageTitle>Login to account</PageTitle>

<div>
    <div>
        <h3>Login</h3>
    </div>
    <div class="login-form">
        <div>
            <label>Username</label>
            <input @bind="_model.UserName" type="text" class="form-control" placeholder="user"/>
        </div>
        <div>
            <label>Password</label>
            <input @bind="_model.UserPass" type="password" class="form-control"/>
        </div>
        <div>
            <button @onclick="Authenticate" class="btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    
    private struct UserModel
    {
        public string UserName { get; set; }
        public string UserPass { get; set; }
    }

    private UserModel _model;

    private async Task Authenticate()
    {
        var userAcc = await LibraryUserProvider.GetUser(_model.UserName);
        if (userAcc is null || userAcc.PasswordHash != _model.UserPass)
        {
            await Js.InvokeVoidAsync("alert", "Invalid username or password");
            return;
        }

        if (AuthenticationStateProvider is LibAuthenticationStateProvider libAuthState ) 
            await libAuthState.UpdateAuthenticationState(userAcc);
        
        NavigationManager.NavigateTo("/", true);
    }
}