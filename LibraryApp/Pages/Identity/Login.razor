@using LibraryApp.Identity
@using Microsoft.AspNetCore.Identity

@inject LibraryUserProvider LibraryUserProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime Js
@inject DialogService DialogService
@inject NavigationManager NavigationManager



<div>
    <RadzenCard class="p-5">
        <RadzenTemplateForm Data=@("LoginWithRegisterAndReset")>
            <RadzenLogin AllowRegister="false" AllowResetPassword="false" Login=@(args => OnLogin(args)) />
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@code {

    private async Task OnLogin(LoginArgs args)
    {
        var userAcc = await LibraryUserProvider.GetUser(args.Username);
        if (userAcc is null ||
            LibraryUserProvider.VerifyPassword(userAcc, args.Password) == PasswordVerificationResult.Failed)
        {
            await Js.InvokeVoidAsync("alert", "Invalid username or password");
            return;
        }

        if (AuthenticationStateProvider is LibAuthenticationStateProvider libAuthState)
            await libAuthState.UpdateAuthenticationState(userAcc);

        LibraryUserProvider.CurrentUser = userAcc;
        DialogService.Close();
    }
}