@using LibraryApp.Identity
@using LibraryApp.Data
@using LibraryApp.Data.Models
@inject IJSRuntime Js
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject LibraryUserProvider LibraryUserProvider
@inject IMongoRepository<LibraryUser> LibraryUserRepository


<RadzenCard class="p-5">
    <div class="login-form">
        <div>
            <label>Username</label>
            <input @bind="_model.UserName" type="text" class="form-control" placeholder="user"/>
        </div>
        <div>
            <label>Password</label>
            <input @bind="_model.UserPass" type="password" @onfocus="Verify" 
                   @onfocusout="Verify" class="form-control"/>
        </div>
        <div>
            <label>Repeat password</label>
            <input @bind="_model.UserPassCheck" type="password" @onfocus="Verify"
                   @onfocusout="Verify" class="form-control"/>
        </div>
        <div>
            <label style="color: #ff3c00">@_passCheckError</label>
        </div>
        <div>
            <RadzenButton Click="RegisterUser" class="btn-primary">Register</RadzenButton>
        </div>
    </div>
</RadzenCard>

@code {

    private struct UserModel
    {
        public string UserName { get; set; }
        public string UserPass { get; set; }
        public string UserPassCheck { get; set; }
    }
    
    private string _passCheckError = String.Empty; 

    private UserModel _model;

    private void Verify() => _passCheckError = (_model.UserPass != _model.UserPassCheck) ?
                "Passwords do not match." : String.Empty;

    private async Task RegisterUser()
    {
        var userAcc = await LibraryUserProvider.GetUser(_model.UserName);
        if (userAcc is not null)
        {
            await Js.InvokeVoidAsync("alert", $"User with name {_model.UserName} already exists");
            return;
        }

        userAcc = await LibraryUserProvider.RegisterUser(_model.UserName, _model.UserPass);
        
        var admin = LibraryUserRepository.FindOne(user => user.Role == UserRole.Admin);
        admin.Notifications.Add(new Notification
        {
            Message = $"User {_model.UserName} has been registered. Please activate his account.",
            CreatedAt = DateTime.Now,
            DueTo = DateTime.Now.AddDays(2)
        });
        await LibraryUserRepository.ReplaceOneAsync(admin);

        await Js.InvokeVoidAsync("alert", $"Wait until admin activates your account");
    }
}