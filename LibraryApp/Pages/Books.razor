@page "/books"

<PageTitle>Books</PageTitle>

@using LibraryApp.Data
@using LibraryApp.Data.Models
@using LibraryApp.Identity
@using LibraryApp.Shared.ModelDetails
@using MongoDB.Bson
@inject IMongoRepository<Book> BookRepository
@inject IMongoRepository<LibraryUser> UserRepository
@inject LibraryUserProvider UserProvider
@inject DialogService DialogService
@inject NotificationService NotificationService
<h1>Books</h1>

<p>Books currently listed in our library.</p>

<RadzenCard>
    <RadzenTextBox TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" @bind-Value=@SearchInput></RadzenTextBox>
    <RadzenButton Click=@(_ => Search()) Text="Search" ButtonStyle="ButtonStyle.Primary" />
    <RadzenButton Click=@(_ => Reset()) Text="Reset" ButtonStyle="ButtonStyle.Secondary" />
</RadzenCard>

@if (_books == null) // TODO <loadable> component
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
    FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@_books" TItem="Book" ColumnWidth="300px"
    LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Book" Title="Cover" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" > 
                <Template Context="data"> 
                    <RadzenImage Path="@data.ImageFront.Data" class="rz-gravatar" /> 
                    <RadzenImage Path="@data.ImageCover.Data" class="rz-gravatar" /> 
                </Template> 
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Book" Property="Name" Title="Name" Width="100px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Book" Property="Released" FormatString="{0:yyyy}" Title="Released" Width="80px" />
            <RadzenDataGridColumn TItem="Book" Property="Author.Name" Title="Author" Width="90px" />
            <RadzenDataGridColumn TItem="Book" Property="Copies" Title="Copies" Width="50px" />
            
            <AuthorizeView Roles="Customer">
                <RadzenDataGridColumn TItem="Book" Property="Borrow" Filterable="false" Sortable="false" Title="" Width="90px">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" 
                                      Icon="plus" Class="m-1" Click=@(() => BorrowBook(data.Id)) 
                                      Text="@(user.Borrows.Exists(b => b.Id == data.Id.ToString()) ? 
                                                "Return" : "Borrow")" />
                    </Template>
                </RadzenDataGridColumn>
            </AuthorizeView>
            <AuthorizeView Roles="Admin">
                <RadzenDataGridColumn TItem="Book" Property="Delete" Filterable="false" Sortable="false" Title="" Width="90px">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter"
                            Icon="delete" Class="m-1" Click=@(() => DeleteBook(data.Id)) Text="Delete" />
                    </Template>
                </RadzenDataGridColumn>
            </AuthorizeView>
            <RadzenDataGridColumn TItem="Book" Property="Info" Filterable="false" Sortable="false" Title="" Width="90px">
                <Template Context="data">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info"
                        Class="m-1" Click=@(() => OpenBook(data.Id)) Text="Info" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private IEnumerable<Book>? _books;

    private LibraryUser? user;

    private string? SearchInput { get; set; }

    private async Task Reset()
        => await Task.Run(() => LoadBooks());

    private async Task Search()
    {
        if (SearchInput?.Length > 2)
        {
            _books = BookRepository.SearchFor(SearchInput);
        }
        await Task.Run(() => null);
    }

    private async Task DeleteBook(ObjectId bookId)
    {
        await BookRepository.DeleteByIdAsync(bookId);
        LoadBooks();
    }

    private async Task BorrowBook(ObjectId bookId)
    {
        user = UserProvider.GetLatestUser();
        if (user is not null)
        {
            if (user.Borrows.Exists(book => book.Id == bookId.ToString()))
            {
                user.Borrows.Remove(user.Borrows.FirstOrDefault(book => book.Id == bookId.ToString()));
                await UserRepository.ReplaceOneAsync(user);

                var uBook = _books?.FirstOrDefault(x => x.Id == bookId);
                uBook.Copies++;
                await BookRepository.ReplaceOneAsync(uBook);

                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Book returned", Detail = $"You have returned this book.", Duration = 4000 });

                LoadBooks();
                return;
            }

            if (user.Borrows.Count >= 6)
            {
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Limit reached", Detail = $"Limit of books borrowed has been reached.", Duration = 4000 });
                return;
            }

            var book = _books?.FirstOrDefault(x => x.Id == bookId);

            if (book is {Copies: > 0 })
            {
                book.Copies--;
                await BookRepository.ReplaceOneAsync(book);

                var borrow = new Borrow
                {
                    Id = bookId.ToString(), BookName = book.Name, 
                    Created = DateTime.Now, Message = "You have borrowed a book"
                };

                var notification = new Notification()
                {
                    AssigneeId = user.Id.ToString(),
                    RefId = bookId.ToString(),
                    Action = NotificationAction.ReturnBookReminder,
                    DueTo = DateTime.Now.AddDays(7)
                };
                
                user.Borrows.Add(borrow);
                user.Notifications.Add(notification);

                await UserRepository.ReplaceOneAsync(user);
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Book borrowed", Detail = $"{book.Name} has been borrowed", Duration = 4000 });
            }
        }
        LoadBooks();
    }

    async Task OpenBook(ObjectId bookId)
    {
        await DialogService.OpenAsync<BookDetail>($"Book",
        new Dictionary<string, object>() { { "BookId", bookId } },
        new DialogOptions() { Width = "800px", Height = "700px" });
        LoadBooks();
    }

    async void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        await InvokeAsync(() => {StateHasChanged();});
    }

    protected override Task<bool> OnInitializedAsync()
    {
        user = UserProvider.CurrentUser;
        LoadBooks();
        return Task.Run(() => true);
    }

    private void LoadBooks() => _books = BookRepository.FilterBy(book => true);
}